#! /usr/bin/env python

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

'''
Sends a message to Slack with a formatted payload from a JSON file
generated by client.py
'''

import argparse
import json
import os
import sys

import requests


def parse_args(cmdln_args):
    parser = argparse.ArgumentParser(
        description='Post formatted payload to Slack'
    )

    parser.add_argument(
        '--input',
        default='payload.json',
        help='Input (JSON)',
        required=False
    )

    parser.add_argument(
        '--type',
        default='cases',
        help='Type of post',
        required=False
    )

    return parser.parse_args(args=cmdln_args)


def post_to_slack(data):
    webhook_url = os.environ['SLACK_WEBHOOK']
    requests.post(webhook_url, json=data)


def get_header_app_name(dataset: dict) -> str:
    match dataset['project']:
        case 'moz-fenix':
            return 'Fenix'
        case 'moz-focus-android':
            return 'Focus Android'
        case _:
            return 'Default'


def get_header_app_emoji(dataset: dict) -> str:
    match dataset['project']:
        case 'moz-fenix':
            return ':firefox-browser:'
        case 'moz-focus-android':
            return ':focusandroid:'
        case _:
            return ':android:'


def build_payload_header(header_type: str, dataset: dict) -> str:
    match header_type:
        case 'cases':
            return [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "Daily {app} {emoji} UI Tests Ran Count"
                        .format(
                            app=get_header_app_name(dataset),
                            emoji=get_header_app_emoji(dataset)
                        )
                    }
                }
            ]
        case _:
            return [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "TODO"
                    }
                }
            ]


def build_payload_content(type: str, dataset: dict) -> list:
    match type:
        case 'cases':
            return [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "{app}: *{count}*"
                        .format(
                            app=dataset['application'],
                            count=str(dataset['payload'])
                        )
                    }
                }
            ]
        case _:
            return [
                {}
            ]

def construct_payload() -> dict:
    args = parse_args(sys.argv[1:])
    try:
        with open(args.input) as data_file:
            dataset = json.load(data_file)
            header = build_payload_header(args.type, dataset)
            content = build_payload_content(args.type, dataset)
            divider = [{"type": "divider"}]
            footer = [
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": ":testops-notify: created by [<{}|{}>]"
                                .format(
                                    "https://mana.mozilla.org/wiki/x/P_zNBw",
                                    "Mobile Test Engineering")
                            }
                        ]
                    }
                ]
            return {'blocks': header + divider + content + divider + footer}
    except FileNotFoundError as e:
        print(e)
        sys.exit(1)


def main():
    post_to_slack(construct_payload())


if __name__ == '__main__':
    main()
